# ----------------------------------------------------------
# Path attributes
# ----------------------------------------------------------

    # UPLOAD: /api/upload for uploading large files
    server:
      paths:
        - path: /api
        - path: /api/upload
          clientMaxBodySize: 100m

    # LONG PROCESSING: /api/process with a large read timeout
    server:
      paths:
        - path: /api
        - path: /api/process
          readTimeout: 120

    # BASIC AUTH: /api/public with basic auth disabled
    server:
      paths:
        - path: /api
        - path: /api/public
          basicAuthEnabled: false

    # BASIC AUTH: /api/private with path specific basic auth secret
    server:
      paths:
        - path: /api
        - path: /api/private
          basicAuthEnabled: true
          basicAuthHtpasswdSecret: ${taito_project}-${taito_env}-private-auth

    # TODO: More examples

# ----------------------------------------------------------
# Networking rules
# ----------------------------------------------------------

  services:
    server:
      # INGRESS: Server can be accessed by ingress controller (paths been set)
      paths:
        - path: /api
      # INGRESS: Server can be accessed by some-application
      ingress:
        - app: some-application

    # EGRESS: Server allowed to access storage service, .google.com, and some IP
    server:
      egress:
        - fullname: ${taito_project}-${taito_env}-storage
        - domain: .google.com
        - ip: 216.58.207.227/32

    # EGRESS: Storage allowed to access any public ip (not recommended)
    storage:
      egress:
        - ip: public  # any, private, public, or CIDR (e.g. 216.58.207.227/32)

# Disable all networking rules (not recommended)
full-stack:
  networkPolicyEnabled: false

# ----------------------------------------------------------
# CPU/MEM resources
# ----------------------------------------------------------

    # SET CPU/MEM RESOURCES:
    server:
      cpuRequest: 100m      # request for 0.1 CPU
      cpuLimit: 500m        # limit to 0.5 CPU
      memoryRequest: 128Mi  # request for 128 MB
      memoryLimit: 512Mi    # limit to 512 MB

# ----------------------------------------------------------
# Health checks
# ----------------------------------------------------------

    # CUSTOM HEALTH CHECK PATH AND INITIAL DELAY
    # (livenessPath is /healthz by default)
    server:
      livenessPath: /healthcheck  # /healthz by default
      livenessInitialDelay: 120   # seconds

    # CUSTOM HEALTH CHECK COMMAND
    # (runs 'my-cli check' inside the container)
    server:
      livenessCommand:
        - my-cli
        - check

    # DISABLE HEALTH CHECKS (not recommended!)
    server:
      livenessDisabled: true

# ----------------------------------------------------------
# Cron jobs
# ----------------------------------------------------------

    # SIMPLE CRON JOB EXAMPLE:
    # Scheduler polls server endpoint based on a cron schedule
    scheduler:
      type: job
      image: buildpack-deps:curl
      cpuRequest: 1m
      memoryRequest: 1Mi
      runAsUser: 2
      runAsGroup: 2
      secretEnv:
        SCHEDULER_SECRET: ${taito_project}-${taito_env}-scheduler.secret
      cronJobs:
        - name: schedulerjob
          schedule: "0 2 * * *"
          concurrencyPolicy: Forbid # Forbid or Allow
          args:
            - /bin/sh
            - -c
            - curl -sS -H "X-Secret:$$SCHEDULER_SECRET" http://${taito_project}-${taito_target_env}-server:8080/posts?offset=0&limit=1

    # RE-USE SETTINGS OF AN ANOTHER SERVICE:
    # Re-use server Docker image and settings for running cron jobs also.
    # Add additional JOB_VARIABLE and JOB_SECRET for cron job.
    server:
      ...
      ...
      cronJobs:
        - name: examplejob
          schedule: "30 2 * * *"
          concurrencyPolicy: Forbid # Forbid or Allow
          args:
            - /bin/sh
            - -c
            - date; echo Hello from server
          secret:
            JOB_SECRET: ${taito_project}-${taito_env}-job.secret
          env:
            JOB_VARIABLE: 1234

# ----------------------------------------------------------
# External services (dedicated IP address, any port)
# ----------------------------------------------------------

  services:
    mail:
      type: external
      port: 110
      targetPort: 8080
      ...
      ...

# ----------------------------------------------------------
# Multiple ports
# ----------------------------------------------------------

  services:
    mail:
      ports:
       - port: 110
         targetPort: 8080
       - port: 995
         targetPort: 9080

# ----------------------------------------------------------
# Volumes and persistence
# ----------------------------------------------------------

  # ENABLE PERSISTENCE
  persistence:
    enabled: true
    # a) Either use an existing disk:
    existingClaim: existing-pvc
    # b) Or create new:
    accessMode: ReadWriteOnce # NOTE: GCP does not support ReadWriteMany
    size: 4Gi
    storageClass: fast

  # USE THE DISK
  services:
    database:
      ...
      # Avoid duplicate mount errors by using Recreate instead of RollingUpdate
      strategyType: Recreate
      # Mount /data/db and /data/backup to the external disk
      persistentVolumeMounts:
        - mountPath: /data/db
          volumePath: data-db-${taito_env}
          readOnly: false
        - mountPath: /data/backup
          volumePath: data-backup-${taito_env}
          readOnly: false
          # TODO: add support for this
          persistentVolumeClaim: another-existing-pvc # Use another disk than the default
      ...

# ----------------------------------------------------------
# Sidecars
# ----------------------------------------------------------

# TODO
