stack:
  admin: admin
  bot:
  cache:
  client: client
  database: database
  queue:
  server: server
  storage: storage
  worker:

# Common settings

logLevel: info    # trace, debug, info, warn, error, fatal
debug: 'false'
repository: ${taito_registry}
imagePullPolicy: ''

domains:
  - ${taito_domain}

# Stack settings

ingress:
  basicAuth: true
  class: nginx
  maxBodySize: 1m

admin:
  replicas: ${kubectl_replicas}
  env:
    SENTRY_PUBLIC_DSN: #sentryPublicDSN

bot:
  replicas: ${kubectl_replicas}
  secrets:
    ADMIN_PASSWORD: user.server-template-admin.auth
    USER_PASSWORD: user.server-template-user.auth
  env:
    SENTRY_DSN: #sentryDSN
    DEBUG: false
    ENV: production

client:
  replicas: ${kubectl_replicas}
  env:
    SENTRY_PUBLIC_DSN: #sentryPublicDSN

server:
  replicas: ${kubectl_replicas}
  secrets:
    JWT_SECRET: jwt.server-template.auth
    ADMIN_PASSWORD: user.server-template-admin.auth
    USER_PASSWORD: user.server-template-user.auth
    S3_KEY_SECRET: storage.server-template.gateway
  env:
    SENTRY_DSN: #sentryDSN
    DEBUG: false
    # TODO remove ENV or set it automatically?
    ENV: production
    S3_URL: http://server-template-storage:9000/
    S3_REGION: ${taito_provider_region}
    S3_BUCKET: server-template-${taito_env}
    S3_KEY_ID: 070UEOQR6LX4YPZLFU0V

worker:
  replicas: ${kubectl_replicas}
  secrets:
    S3_KEY_SECRET: storage.server-template.gateway
  env:
    SENTRY_DSN: #sentryDSN
    DEBUG: false
    ENV: production
    S3_URL: http://server-template-storage:9000/
    S3_REGION: ${taito_provider_region}
    S3_BUCKET: server-template-${taito_env}
    S3_KEY_ID: 070UEOQR6LX4YPZLFU0V

database:
  port: 5432
  db: ${taito_zone}:${taito_provider_region}:${db_database_instance}
  poolMin: 5
  poolMax: 10

# minio as storage gateway
storage:
  image: minio/minio
  replicas: ${kubectl_replicas}
  host: storage
  region: ${taito_provider_region}
  secrets:
    MINIO_SECRET_KEY: storage.server-template.gateway
  env:
    MINIO_ACCESS_KEY: 070UEOQR6LX4YPZLFU0V

cache:
  image: redis:alpine
  replicas: 1 # TODO multiple replicas as redis cluster

queue:
  image: rabbitmq:alpine
  replicas: 1 # TODO multiple replicas as queue cluster

# TODO configure resources
# resources: {}
  #  cpu: 100m
  #  memory: 128Mi
  #requests:
  #  cpu: 100m
  #  memory: 128Mi
