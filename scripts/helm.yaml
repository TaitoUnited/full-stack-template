global:
  domain: ${taito_domain}
  url: https://${taito_domain}
  publicPort: 443
  logProvider: ${taito_logging_provider}
  logFormat: ${taito_logging_format}
  logLevel: info    # trace, debug, info, warn, error, fatal
  registry: ${taito_container_registry}
  imagePullPolicy: ''
  debug: false

full-stack:
  networkPolicyEnabled: true

  ingress:
    class: nginx
    namespace: nginx-ingress
    oldRewritePolicy: false
    tls: true
    domains:
      - name: ${taito_domain}
        altName: ${taito_altdomain}

  # NOTE: See helm/values.yaml for a list of all service attributes
  # and helm/examples.yaml for some examples.
  serviceDefaults:
    # Path defaults
    basicAuthEnabled: ${taito_basic_auth_enabled}
    basicAuthHtpasswdSecret: ${taito_project}-${taito_env}-basic-auth
    # Vertical scaling
    verticalScaleUpdateMode: Off
    # Horizontal scaling
    replicas: ${kubernetes_replicas}
    autoscale: false
    autoscaleCpuPercentage: 70
    autoscaleMemoryPercentage: 70
    minReplicas: ${kubernetes_replicas}
    maxReplicas: 5
    # Env
    env:
      # Environment variables
      COMMON_ENV: ${taito_env}

  services:

    admin:
      paths:
        - path: /admin
      cpuRequest: 2m
      memoryRequest: 2Mi
      env:
        REPLACE_BASE_PATH: /admin
        REPLACE_ASSETS_PATH: ${taito_cdn_project_path}/${taito_build_image_tag}/admin
        REPLACE_ASSETS_DOMAIN: ${taito_cdn_domain}

    client:
      paths:
        - path:
      cpuRequest: 2m
      memoryRequest: 2Mi
      env:
        REPLACE_BASE_PATH:
        REPLACE_ASSETS_PATH: ${taito_cdn_project_path}/${taito_build_image_tag}/client
        REPLACE_ASSETS_DOMAIN: ${taito_cdn_domain}

    graphql:
      paths:
        - path: /graphql
      env:
        GRAPHQL_PORT: '8080'
        GRAPHQL_BINDADDR: '0.0.0.0'
        API_HOST: ${taito_project}-${taito_env}-server
        API_PORT: '8080'

    # TODO: proper setup for Kafka
    kafka:
      enabled: false
      image: bitnami/kafka:latest
      replicas: 1
      port: 9092
      livenessDisabled: true # TODO: use livenessPath or livenessCommand
      memoryRequest: 100Mi
      memoryLimit: 512Mi
      env:
        KAFKA_ZOOKEEPER_CONNECT: ${taito_project}-${taito_env}-zookeeper:2181
        ALLOW_PLAINTEXT_LISTENER: 'yes'

    # TODO: proper setup for Zookeeper
    zookeeper:
      enabled: false
      image: bitnami/zookeeper:latest
      replicas: 1
      port: 2181
      livenessDisabled: true # TODO: use livenessPath or livenessCommand
      memoryRequest: 100Mi
      memoryLimit: 512Mi
      env:
        ALLOW_ANONYMOUS_LOGIN: 'yes'

    # TODO: master and replica
    redis:
      image: bitnami/redis:6.0
      replicas: 1
      port: 6379
      livenessCommand:
        - redis-cli
        - ping
      memoryRequest: 10Mi
      secrets:
        REDIS_PASSWORD: ${taito_project}-${taito_env}-redis.password
      env:
        REDIS_PASSWORD_FILE: '/run/secrets/REDIS_PASSWORD'
        REDIS_AOF_ENABLED: 'no'

    server:
      paths:
        - path: /api
      egress:
        - ip: '${db_database_real_host}/32'
        - fullname: ${taito_project}-${taito_env}-kafka
        - fullname: ${taito_project}-${taito_env}-redis
        - fullname: ${taito_project}-${taito_env}-storage
      livenessInitialDelay: 120
      serviceAccount:
        secret: ${taito_provider_service_account_secret}
      # Database proxy config
      db:
        useProxy: ${gcp_db_proxy_enabled}
        instance: ${taito_zone}:${taito_provider_region}:${db_database_instance}
        port: ${db_database_real_port}
        proxySecret: ${taito_provider_db_proxy_secret}
      secrets:
        DATABASE_SSL_CA: ${db_database_ssl_ca_secret}
        DATABASE_SSL_CERT: ${db_database_ssl_cert_secret}
        DATABASE_SSL_KEY: ${db_database_ssl_key_secret}
        DATABASE_PASSWORD: ${db_database_app_secret}
        REDIS_PASSWORD: ${taito_project}-${taito_env}-redis.password
        BUCKET_KEY_SECRET: ${taito_project}-${taito_env}-storage.secretKey
      secretEnv:
        BUCKET_KEY_ID: ${taito_project}-${taito_env}-storage.accessKeyId
      env:
        SENTRY_DSN: #sentryDSN
        API_PORT: '8080'
        API_BINDADDR: '0.0.0.0'
        KAFKA_HOST: ${taito_project}-${taito_env}-kafka
        KAFKA_PORT: 9092
        DATABASE_HOST: '${db_database_real_host}'
        DATABASE_PORT: '${db_database_real_port}'
        DATABASE_SSL_ENABLED: ${db_database_ssl_enabled}
        DATABASE_SSL_CLIENT_CERT_ENABLED: ${db_database_ssl_client_cert_enabled}
        DATABASE_NAME: ${db_database_name}
        DATABASE_USER: ${db_database_app_username}
        DATABASE_POOL_MIN: '0'
        DATABASE_POOL_MAX: '5'
        REDIS_HOST: ${taito_project}-${taito_env}-redis
        REDIS_PORT: 6379
        BUCKET_URL: http://${taito_project}-${taito_env}-storage:9000/
        BUCKET_REGION: ${taito_provider_region}
        BUCKET_BUCKET: ${taito_random_name}-${taito_env}
        BUCKET_BROWSE_URL: https://console.cloud.google.com/storage/browser/${taito_random_name}-${taito_env}
        BUCKET_DOWNLOAD_URL: https://storage.cloud.google.com/${taito_random_name}-${taito_env}
        BUCKET_FORCE_PATH_STYLE: 'true'
      # EXAMPLE: cron jobs that re-use the same Docker image and settings as server
      # cronJobs:
      #   - name: examplejob1
      #     schedule: "30 2 * * *"
      #     concurrencyPolicy: Forbid # Forbid or Allow
      #     args:
      #       - /bin/sh
      #       - -c
      #       - date; echo Hello from server

    storage:
      egress:
        - ip: public
      image: minio/minio
      port: 9000
      livenessPath: /minio/health/ready
      memoryRequest: 20Mi
      runAsUser: 2
      runAsGroup: 2
      command:
        - minio
        - gateway
        - gcs
        - ${taito_resource_namespace}
      serviceAccount:
        secret: ${taito_provider_service_account_secret}
      secretEnv:
        # Minio requires secret as environment variable in gateway mode
        MINIO_ACCESS_KEY: ${taito_project}-${taito_env}-storage.accessKeyId
        MINIO_SECRET_KEY: ${taito_project}-${taito_env}-storage.secretKey
      env:
        MINIO_CONFIG_DIR: /tmp

    worker:
      enabled: false

    www:
      paths:
        - path: /docs
      cpuRequest: 2m
      memoryRequest: 2Mi
      env:
        REPLACE_BASE_PATH: /docs
        REPLACE_ASSETS_PATH: ${taito_cdn_project_path}/${taito_build_image_tag}/docs
        REPLACE_ASSETS_DOMAIN: ${taito_cdn_domain}

    # TODO: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#ttl-mechanism-for-finished-jobs
