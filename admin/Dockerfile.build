# Builder
FROM node:8.7-alpine as builder
ARG TARGET_ENV=prod
ARG BUILD_VERSION
ENV TARGET_ENV ${TARGET_ENV}
ENV BUILD_VERSION ${BUILD_VERSION}
ENV NODE_ENV development
ENV API_ROOT ''
ENV API_URL /api
ENV APP_SENTRY_PUBLIC_DSN #sentryPublicDSN
RUN apk add --update-cache build-base python git
# Required by the current flow version (can be removed later?)
RUN apk --no-cache add ca-certificates wget && \
  wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://raw.githubusercontent.com/sgerrand/alpine-pkg-glibc/master/sgerrand.rsa.pub && \
  wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.27-r0/glibc-2.27-r0.apk && \
  apk add glibc-2.27-r0.apk
WORKDIR /admin
COPY . /admin
RUN npm install --loglevel warn
# NOTE: postinstall fails in previous step because of root user so we run it manually
RUN npm run postinstall
RUN npm run unit
RUN npm run build && cp -r ./assets/* /build/
EXPOSE 3334
CMD ["npm", "run", "start"]

# Production runtime
FROM nginx:1.13.5-alpine
ARG BUILD_VERSION
LABEL version=${BUILD_VERSION} \
      company=companyname \
      project=server-template \
      role=admin
WORKDIR /build
COPY --from=builder /build .
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /build && \
    mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig
COPY ./config/nginx.conf /etc/nginx
USER nginx
EXPOSE 3334
# TODO dump-init or tiny as init system? Kubernetes uses --init?
