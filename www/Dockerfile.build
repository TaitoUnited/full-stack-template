# Builder and tester container for production build
FROM node:lts-buster-slim as builder

RUN mkdir -p /develop
WORKDIR /develop

ARG SERVICE_DIR=.
COPY ${SERVICE_DIR}/*.sh \
     ${SERVICE_DIR}/package* \
     /develop/

ENV NODE_ENV development
ENV APP_SENTRY_PUBLIC_DSN #sentryPublicDSN
RUN ./install.sh
RUN cp ~/.bashrc /home/node/.bashrc
RUN mkdir -p /build && \
    chown -R node:root /build && \
    chown -R node:root /develop

USER node
RUN . ~/.bashrc && npm ci --loglevel warn

# Install site
COPY --chown=node:root ${SERVICE_DIR} /develop
RUN . ~/.bashrc && \
    npm run install-site

# Force no docker caching during build
# -> required only if data is retrieved from a CMS during build
ARG BUILD_IMAGE_TAG
ENV BUILD_IMAGE_TAG ${BUILD_IMAGE_TAG}
RUN echo "${BUILD_IMAGE_TAG}"

# Build and test site
RUN npm run build && \
    npm run unit


# Production runtime
FROM nginx:stable-alpine
ARG BUILD_VERSION
LABEL version=${BUILD_VERSION} \
      company=taito \
      project=full-stack-template \
      role=www
RUN mkdir -p /service
WORKDIR /service
RUN chown -R nginx:root /service && \
    mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.orig
RUN sed -i '/application\/json/a\    application/wasm wasm; text/yaml yaml yml;' \
    /etc/nginx/mime.types

# Copy
COPY docker-entrypoint.sh /
COPY ./nginx.conf /etc/nginx
COPY --from=builder /build .

# Move source maps to /meta by default
RUN mkdir /meta && mv *.map /meta || :

# Give nginx modify rights to some files that are modified at startup
RUN find . -name '*.html' -exec chown nginx:nginx {} \; && \
    find . -name 'runtime.*.js' -exec chown nginx:nginx {} \; && \
    find . -name 'manifest.json' -exec chown nginx:nginx {} \;

# Startup
USER nginx
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
EXPOSE 8080
