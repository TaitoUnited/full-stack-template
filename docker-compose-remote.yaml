# This file is used for running Docker Compose on remote servers. It is not
# needed if you use Kubernetes instead.

version: '3.5'
services:
  server-template-ingress:
    container_name: server-template-ingress
    image: nginx:1.15-alpine
    restart: unless-stopped
    networks:
      - default
    ports:
      - "_PORT_:80"
    secrets:
      - BASIC_AUTH_HTPASSWD
    volumes:
      - "./docker-nginx.conf:/etc/nginx/nginx.conf:delegated"

  server-template-admin:
    container_name: server-template-admin
    image: local/server-template/admin:_IMAGE_TAG_
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template

  server-template-client:
    container_name: server-template-client
    image: local/server-template/client:_IMAGE_TAG_
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    secrets:
      # NOTE: Database connection is for tests only
      - DATABASE_PASSWORD
      - EXAMPLE_SECRET
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template

  server-template-graphql:
    container_name: server-template-graphql
    image: local/server-template/graphql:_IMAGE_TAG_
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template
      COMMON_DOMAIN: localhost
      COMMON_URL: http://localhost:9999
      COMMON_DEBUG: 'false'
      COMMON_LOG_FORMAT: text
      COMMON_LOG_LEVEL: info      # trace, debug, info, warn, error, fatal
      COMMON_ENV: local
      DEBUG: 'false'
      GRAPHQL_PORT: 8080
      GRAPHQL_BINDADDR: 0.0.0.0
      API_HOST: server-template-server
      API_PORT: 8080

  server-template-server:
    container_name: server-template-server
    image: local/server-template/server:_IMAGE_TAG_
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    secrets:
      - DATABASE_PASSWORD
      - S3_KEY_SECRET
      - EXAMPLE_SECRET
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template
      COMMON_DEBUG: 'false'
      COMMON_LOG_FORMAT: text
      COMMON_LOG_LEVEL: info      # trace, debug, info, warn, error, fatal
      COMMON_ENV: local
      DEBUG: 'false'
      SENTRY_DSN: #sentryDSN
      API_PORT: 8080
      API_BINDADDR: 0.0.0.0
      KAFKA_HOST: server-template-kafka
      KAFKA_PORT: 9092
      DATABASE_HOST: 172.17.0.1
      DATABASE_NAME: ${db_database_name}
      DATABASE_USER: ${db_database_app_username}
      DATABASE_POOL_MIN: '1'
      DATABASE_POOL_MAX: '10'
      S3_URL: http://server-template-storage:9000/
      S3_REGION: milkyway
      S3_BUCKET: bucket
      S3_KEY_ID: minio

  server-template-www:
    container_name: server-template-www
    image: local/server-template/www:_IMAGE_TAG_
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"

  server-template-cache:
    container_name: server-template-cache
    image: redis:5.0-alpine
    restart: unless-stopped
    networks:
      - default
    ports:
      - "6379"

  # "EXTERNAL RESOURCES"
  # Uncomment if you want to run in Docker Compose instead

  server-template-kafka:
    container_name: server-template-kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=server-template-zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes

  server-template-zookeeper:
    container_name: server-template-zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  # server-template-database:
  #   container_name: server-template-database
  #   image: postgres:9.6
  #   restart: unless-stopped
  #   networks:
  #     - default
  #   ports:
  #     - "5432"
  #   secrets:
  #     - DATABASE_PASSWORD
  #   environment:
  #     POSTGRES_DB: ${db_database_name}
  #     POSTGRES_USER: ${db_database_app_username}
  #     POSTGRES_PASSWORD_FILE: /run/secrets/DATABASE_PASSWORD
  #   volumes:
  #     - "./database:/docker-entrypoint-initdb.d:delegated"
  #     - "./database/mount:/var/lib/postgresql/data"

  # "INFRASTRUCTURE"

  # watchtower:
  #   restart: always
  #   image: index.docker.io/v2tec/watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./watchtower-config.json:/config.json
  #   command: --interval 60

secrets:
  DATABASE_PASSWORD:
    file: ./secrets/${taito_env}/${db_database_app_secret}
  S3_KEY_SECRET:
    file: ./secrets/${taito_env}/${taito_project}-${taito_env}-storage-gateway.secret
  EXAMPLE_SECRET:
    file: ./secrets/${taito_env}/${taito_project}-${taito_env}-example.secret
  BASIC_AUTH_HTPASSWD:
    file: ./secrets/${taito_env}/${taito_project}-${taito_env}-basic-auth.auth

networks:
  default:
