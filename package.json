{
  "name": "server-template",
  "scripts": {
    "install-ci": "echo '# No additional dependencies need to be installed in ci mode'",
    "install-dev": "echo '# Installing all libraries on host for code editor support. TODO how to minimize as --only=dev affects devDepencies also?' && npm run install-all",
    "install-all": "npm-run-all install-all:admin install-all:bot install-all:client install-all:server install-all:worker ",
    "install-all:admin": "cd admin && npm install && npm run types-install",
    "install-all:bot": "cd bot && npm install && npm run types-install",
    "install-all:client": "cd client && npm install && npm run types-install",
    "install-all:server": "cd server && npm install && npm run types-install",
    "install-all:worker": "cd worker && npm install && npm run types-install",
    "taito-init": "taito -z init:${taito_env} && npm run import-db-data",
    "taito-init:clean": "taito -z init:${taito_env} --clean && npm run import-db-data",
    "taito-init:local:clean": "npm run taito-init:clean && npm run clean:storage",
    "clean:storage": "if [ -d storage ]; then echo Cleaning storage; rm -rf ./storage/bucket/*; rm -rf ./storage/.minio.sys/buckets/bucket/*/; fi",
    "import-db-data": "if [ -f ./database/data/${taito_env}.sql ]; then taito db-import:${taito_env} ./database/data/${taito_env}.sql; fi",
    "show-basic-auth": "echo '* Non-production basic auth credentials: TODO user / painipaini'",
    "info:local": "npm run show-basic-auth && echo && echo Usernames: 'admin', 'user' && taito secrets | grep 'Showing\\|PASSWORD'",
    "info:dev": "npm run show-basic-auth && echo && echo Usernames: 'admin', 'user' && taito secrets:dev | grep -A 1 'Showing\\|user.'",
    "info:test": "npm run show-basic-auth && echo Usernames: 'admin', 'user' && echo && taito secrets:test | grep -A 1 'Showing\\|user.'",
    "info:stag": "npm run show-basic-auth",
    "info:prod": "npm run show-basic-auth",
    "lint": "echo Running lint locally && npm-run-all --parallel lint:admin lint:bot lint:client lint:server lint:worker ",
    "lint:admin": "cd admin && npm run lint",
    "lint:bot": "cd bot && npm run lint",
    "lint:client": "cd client && npm run lint",
    "lint:server": "cd server && npm run lint",
    "lint:worker": "cd worker && npm run lint",
    "unit": "echo Running unit tests locally && npm-run-all --parallel unit:admin unit:bot unit:client unit:server unit:worker ",
    "unit:admin": "cd admin && npm run unit",
    "unit:bot": "cd bot && npm run unit",
    "unit:client": "cd client && npm run unit",
    "unit:server": "cd server && npm run unit",
    "unit:worker": "cd worker && npm run unit",
    "test": "npm-run-all test:admin test:bot test:client test:server test:worker ",
    "test:admin": "taito util-test:admin:${taito_env}",
    "test:bot": "echo DISABLED taito util-test:bot:${taito_env}",
    "test:client": "taito util-test:client:${taito_env}",
    "test:server": "taito util-test:server:${taito_env}",
    "test:worker": "echo DISABLED taito util-test:worker:${taito_env}",
    "check-deps": "npm-run-all check-deps:root check-deps:admin check-deps:bot check-deps:client check-deps:server check-deps:worker ",
    "check-deps:root": "echo --- ROOT --- && npm-check || : && npm run check-deps-note",
    "check-deps:admin": "cd admin && echo --- ADMIN --- && npm-check || : && npm run check-deps-note",
    "check-deps:bot": "cd bot && echo --- BOT --- && npm-check || : && npm run check-deps-note",
    "check-deps:client": "cd client && echo --- CLIENT --- && npm-check || : && npm run check-deps-note",
    "check-deps:server": "cd server && echo --- SERVER --- && npm-check || : && npm run check-deps-note",
    "check-deps:worker": "cd worker && echo --- WORKER --- && npm-check || : && npm run check-deps-note",
    "check-deps-note": "echo && echo 'NOTE: Many of the devDependencies and ~ references are actually in use even if reported unused. But all unused dependencies can usually be removed from package.json.' && echo",
    "check-size": "npm-run-all --parallel check-size:admin check-size:client",
    "check-size:admin": "cd admin && echo --- ADMIN --- && npm run analyze",
    "check-size:client": "cd client && echo --- CLIENT --- && npm run analyze",
    "project-contacts": "cat PROJECT.md | sed -n -e '/^## Contacts.*$/,/^#.*$/{ /^## Contacts.*$/d; /^#.*$/d; p; }'",
    "docs": "echo TODO: generate docs in package.json",
    "scan": "echo 'Linting is executed in Dockerfiles during build' && echo 'TODO: execute code analysis here?'",
    "commitmsg": "commitlint -E GIT_PARAMS",
    "precommit": "if [[ $taito_mode != 'ci' ]]; then npm run precommit:branch && npm run precommit:lint; fi",
    "precommit:branch": "if git-branch-is -q test || git-branch-is -q stag || git-branch-is -q master; then echo 'ERROR: You cannot commit changes directly to this environment branch. Only fast-forward merge is allowed.' && echo && exit 1; fi",
    "precommit:lint": "echo 'SKIP: Skipping linting on commit since we are already continuously linting during development.'",
    "prepush": "if [[ $taito_mode != 'ci' ]]; then npm-run-all --parallel lint disabled-types unit; fi",
    "types": "if [ -f .flowconfig ]; then flow; elif [ -f tsconfig.json ]; then echo TODO run typescript; fi",
    "disabled-types": "echo flow/typescript check disabled on prepush",
    "release-pre:prod": "semantic-release --dry-run",
    "release-post:prod": "semantic-release"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ],
    "rules": {
      "type-enum": [
        2,
        "always",
        [
          "wip",
          "feat",
          "fix",
          "docs",
          "style",
          "refactor",
          "perf",
          "test",
          "revert",
          "build",
          "ci",
          "chore"
        ]
      ]
    }
  },
  "release": {
    "npmPublish": false,
    "ci": true,
    "analyzeCommits": {
      "preset": "angular",
      "releaseRules": [
        {"type": "feat", "release": "minor"},
        {"type": "fix", "release": "patch"},
        {"type": "docs", "release": "patch"},
        {"type": "style", "release": "patch"},
        {"type": "refactor", "release": "patch"},
        {"type": "perf", "release": "patch"},
        {"type": "test", "release": "patch"},
        {"type": "revert", "release": "patch"},
        {"type": "build", "release": "patch"},
        {"type": "ci", "release": "patch"},
        {"type": "chore", "release": "patch"}
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TaitoUnited/server-template.git"
  },
  "devDependencies": {
    "@commitlint/cli": "^7.1.2",
    "@commitlint/config-conventional": "^7.1.2",
    "git-branch-is": "~2.0.0",
    "husky": "~0.14.3",
    "npm-run-all": "~4.1.3",
    "semantic-release": "~15.9.14"
  }
}
