{
  "name": "server-template",
  "scripts": {
    "install-ci": "echo '# No additional dependencies need to be installed in ci mode'",
    "install-dev": "echo '# Installing all libraries on host for code editor support. TODO how to minimize as --only=dev affects devDepencies also?' && npm run install-all",
    "install-all": "npm-run-all install-all:admin install-all:client install-all:graphql install-all:server install-all:worker install-all:www ",
    "install-all:admin": "cd admin && npm install",
    "install-all:client": "cd client && npm install",
    "install-all:graphql": "cd graphql && npm install",
    "install-all:server": "cd server && npm install",
    "install-all:worker": "cd worker && npm install",
    "install-all:www": "cd www && npm install",
    "taito-init": "taito -z ${taito_options} init:${taito_env} && npm run import-db-data",
    "taito-init:clean": "taito -z ${taito_options} init:${taito_env} --clean && npm run import-db-data && npm run clean:storage",
    "import-db-data": "if [ -f ./database/data/${taito_env}.sql ]; then taito ${taito_options} db import:${taito_env} ./database/data/${taito_env}.sql; fi",
    "clean:storage": "if [ ${taito_env} = 'local' ] && [ -d storage ]; then echo Cleaning storage; rm -rf ./storage/bucket/*; rm -rf ./storage/.minio.sys/buckets/bucket/*/; fi",
    "db-deploy": "npm run generate-db-classes",
    "generate-db-classes": "if [ ${taito_env} = 'local' ] && [ -f ./server/generate ]; then taito ${taito_options} exec:server ./generate; fi",
    "info:local": "yes | taito ${taito_options} secrets:${taito_env}",
    "info": "yes | taito ${taito_options} secrets:${taito_env} | grep :\\{PLAIN\\} | sed -e 's|{PLAIN}| |'",
    "info_todo_comment": "TODO autoconfirm on taito secrets:prod",
    "lint": "echo Running lint locally && npm-run-all --parallel lint:admin lint:client lint:graphql lint:server lint:worker lint:www ",
    "lint:admin": "cd admin && npm run lint",
    "lint:client": "cd client && npm run lint",
    "lint:graphql": "cd graphql && npm run lint",
    "lint:server": "cd server && npm run lint",
    "lint:worker": "cd worker && npm run lint",
    "lint:www": "cd www && npm run lint",
    "unit": "echo Running unit tests locally && npm-run-all --parallel unit:admin unit:client unit:graphql unit:server unit:worker unit:www ",
    "unit:admin": "cd admin && npm run unit",
    "unit:client": "cd client && npm run unit",
    "unit:graphql": "cd graphql && npm run unit",
    "unit:server": "cd server && npm run unit",
    "unit:worker": "cd worker && npm run unit",
    "unit:www": "cd www && npm run unit",
    "test": "npm-run-all test:admin test:client test:graphql test:server test:worker test:www ",
    "test:admin": "taito ${taito_options} util test:admin:${taito_env}",
    "test:client": "taito ${taito_options} util test:client:${taito_env}",
    "test:graphql": "taito ${taito_options} util test:graphql:${taito_env}",
    "test:server": "taito ${taito_options} util test:server:${taito_env}",
    "test:worker": "echo DISABLED taito ${taito_options} util test:worker:${taito_env}",
    "test:www": "echo DISABLED taito ${taito_options} util test:www:${taito_env}",
    "taito-host-cypress": "npm run taito-host-cypress:client",
    "taito-host-cypress:client": "cd client && DATABASE_PASSWORD=$test_all_DATABASE_PASSWORD npm run cypress:open",
    "taito-host-cypress:admin": "cd admin && DATABASE_PASSWORD=$test_all_DATABASE_PASSWORD npm run cypress:open",
    "taito-host-check-code": "docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate engines:install && docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze",
    "_check-deps_comment": "TODO how to pass -u argument from check-deps to check-deps:TARGET?",
    "check-deps": "npm-run-all \"check-deps:root {@}\" \"check-deps:admin {@}\" \"check-deps:client {@}\" \"check-deps:graphql {@}\" \"check-deps:server {@}\" \"check-deps:worker {@}\" \"check-deps:www {@}\" -- ",
    "check-deps:root": "npm run _check-deps-script -- . ",
    "check-deps:admin": "npm run _check-deps-script -- admin ",
    "check-deps:client": "npm run _check-deps-script -- client ",
    "check-deps:graphql": "npm run _check-deps-script -- client ",
    "check-deps:server": "npm run _check-deps-script -- server ",
    "check-deps:worker": "npm run _check-deps-script -- worker ",
    "check-deps:www": "npm run _check-deps-script -- www ",
    "_check-deps-script": "sh -c 'echo --- ${0} --- && cd ${0} && (npm-check ${@} || :) && echo && echo \"NOTE: Many of the devDependencies and ~ references are actually in use even if reported unused. But all unused dependencies can usually be removed from package.json.\" && echo' ",
    "check-size": "npm-run-all \"check-size:admin {@}\" \"check-size:client {@}\" -- ",
    "check-size:admin": "cd admin && echo --- admin --- && npm run analyze -- ",
    "check-size:client": "cd client && echo --- client --- && npm run analyze -- ",
    "project-contacts": "cat PROJECT.md | sed -n -e '/^## Contacts.*$/,/^#.*$/{ /^## Contacts.*$/d; /^#.*$/d; p; }'",
    "precommit:branch": "if git-branch-is -q test || git-branch-is -q stag || git-branch-is -q master; then echo 'ERROR: You cannot commit changes directly to this environment branch. Only fast-forward merge is allowed.' && echo && exit 1; fi",
    "precommit:lint": "echo 'SKIP: Skipping linting on commit since we are already continuously linting during development.'",
    "release-pre:prod": "semantic-release --dry-run",
    "release-post:prod": "semantic-release --no-ci"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-commit": "if [[ $taito_mode != 'ci' ]]; then npm run precommit:branch && npm run precommit:lint; fi",
      "pre-push": "if [[ $taito_mode != 'ci' ]]; then npm-run-all --parallel lint unit; fi"
    }
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ],
    "rules": {
      "type-enum": [
        2,
        "always",
        [
          "wip",
          "feat",
          "fix",
          "docs",
          "style",
          "refactor",
          "perf",
          "test",
          "revert",
          "build",
          "ci",
          "chore"
        ]
      ]
    }
  },
  "release": {
    "npmPublish": false,
    "analyzeCommits": {
      "preset": "angular",
      "releaseRules": [
        {
          "type": "feat",
          "release": "minor"
        },
        {
          "type": "fix",
          "release": "patch"
        },
        {
          "type": "docs",
          "release": "patch"
        },
        {
          "type": "style",
          "release": "patch"
        },
        {
          "type": "refactor",
          "release": "patch"
        },
        {
          "type": "perf",
          "release": "patch"
        },
        {
          "type": "test",
          "release": "patch"
        },
        {
          "type": "revert",
          "release": "patch"
        },
        {
          "type": "build",
          "release": "patch"
        },
        {
          "type": "ci",
          "release": "patch"
        },
        {
          "type": "chore",
          "release": "patch"
        }
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TaitoUnited/server-template.git"
  },
  "devDependencies": {
    "@commitlint/cli": "^7.5.2",
    "@commitlint/config-conventional": "^7.5.0",
    "git-branch-is": "^2.1.0",
    "husky": "^1.3.1",
    "npm-run-all": "~4.1.3",
    "semantic-release": "^15.13.3"
  }
}
