{
  "name": "full-stack-template",
  "scripts": {
    "prepare": "husky install",
    "install-clean": "echo '# Nothing to cleanup'",
    "install-ci": "npm-run-all install-all:shared",
    "install-dev": "echo '# Installing all libraries on host for code editor support. TODO how to minimize as --only=dev affects devDepencies also?' && npm-run-all install-all",
    "install-all": "npm-run-all -c install-all:admin install-all:client install-all:shared install-all:server install-all:worker install-all:www ",
    "install-all:admin": "echo admin libs... && cd admin && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "install-all:client": "echo client libs... && cd client && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "install-all:server": "echo server libs... && cd server && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "install-all:shared": "echo shared libs... && cd shared && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "install-all:worker": "echo worker libs... && cd worker && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "install-all:www": "echo www libs... && cd www && mkdir -p node_modules && npm install || echo WARNING: Some libs failed to install",
    "taito-init": "taito -z ${taito_options} init:${taito_env} && npm-run-all import-db-data generate",
    "taito-init:clean": "taito -z ${taito_options} init:${taito_env} --clean && npm-run-all import-db-data clean:storage generate",
    "import-db-data": "if [ -f ./database/data/${taito_env}.sql ]; then taito ${taito_options} db import:${taito_env} ./database/data/${taito_env}.sql; fi",
    "clean:storage": "if [ ${taito_env} = 'local' ] && [ -d storage ]; then echo Cleaning storage; rm -rf ./storage/bucket/*; rm -rf ./storage/.minio.sys/buckets/bucket/*/; fi",
    "taito-host-uikit": "cd client && npm run uikit:preview",
    "code-generate": "npm run code-generate:server",
    "code-generate:server": "cd server && ./generate-code.sh",
    "generate": "npm-run-all generate:server generate:client ",
    "generate:client": "if [ ${taito_env} = 'local' ] && [ -f ./client/generate.sh ]; then (cd client && ./generate.sh); else echo Nothing to generate; fi",
    "generate:server": "if [ ${taito_env} = 'local' ] && [ -f ./server/generate.sh ]; then (cd server && ./generate.sh); else echo Nothing to generate; fi",
    "info:local": "yes | taito ${taito_options} secret show:${taito_env}",
    "info": "yes | taito ${taito_options} secret show:${taito_env} basic-auth",
    "taito-host-lint": "echo Running lint locally && npm-run-all -p -c taito-host-lint:admin taito-host-lint:client taito-host-lint:server taito-host-lint:worker taito-host-lint:www ",
    "taito-host-lint:admin": "cd admin && npm-run-all lint",
    "taito-host-lint:client": "cd client && npm-run-all lint",
    "taito-host-lint:server": "cd server && npm-run-all lint",
    "taito-host-lint:worker": "cd worker && npm-run-all lint",
    "taito-host-lint:www": "cd www && npm-run-all lint",
    "taito-host-unit": "echo Running unit tests locally && npm-run-all -p -c taito-host-unit:admin taito-host-unit:client taito-host-unit:server taito-host-unit:worker taito-host-unit:www ",
    "taito-host-unit:admin": "cd admin && npm-run-all 'unit {@}' --",
    "taito-host-unit:client": "cd client && npm-run-all 'unit {@}' --",
    "taito-host-unit:server": "cd server && npm-run-all 'unit {@}' --",
    "taito-host-unit:worker": "cd worker && npm-run-all 'unit {@}' --",
    "taito-host-unit:www": "cd www && npm-run-all 'unit {@}' --",
    "test": "npm-run-all test:admin test:client test:server test:worker test:www ",
    "test:admin": "taito ${taito_options} util test:admin:${taito_env}",
    "test:client": "taito ${taito_options} util test:client:${taito_env}",
    "test:server": "taito ${taito_options} util test:server:${taito_env}",
    "test:worker": "echo DISABLED taito ${taito_options} util test:worker:${taito_env}",
    "test:www": "echo DISABLED taito ${taito_options} util test:www:${taito_env}",
    "taito-host-cypress": "npm-run-all taito-host-cypress:client",
    "taito-host-cypress:client": "cd client && DATABASE_PASSWORD=$test_all_DATABASE_PASSWORD npm-run-all cypress:open",
    "taito-host-cypress:admin": "cd admin && DATABASE_PASSWORD=$test_all_DATABASE_PASSWORD npm-run-all cypress:open",
    "code-check": "docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate engines:install && docker run --interactive --tty --rm --env CODECLIMATE_CODE=\"$PWD\" --volume \"$PWD\":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze",
    "taito-host-code-check": "npm-run-all code-check",
    "_dep-check_comment": "TODO how to pass -u argument from dep-check to dep-check:TARGET?",
    "dep-check": "npm run \"dep-check:root {@}\" \"dep-check:admin {@}\" \"dep-check:client {@}\" \"dep-check:server {@}\" \"dep-check:worker {@}\" \"dep-check:www {@}\" -- ",
    "dep-check:root": "npm run _dep-check-script -- . ",
    "dep-check:admin": "npm run _dep-check-script -- admin ",
    "dep-check:client": "npm run _dep-check-script -- client ",
    "dep-check:server": "npm run _dep-check-script -- server ",
    "dep-check:worker": "npm run _dep-check-script -- worker ",
    "dep-check:www": "npm run _dep-check-script -- www ",
    "dep-check-www-site": "npm run _dep-check-script -- www/site ",
    "_dep-check-script": "sh -c 'echo --- ${0} --- && cd ${0} && (npm-check ${@} || :) && echo && echo \"NOTE: Many of the devDependencies and ~ references are actually in use even if reported unused. But all unused dependencies can usually be removed from package.json.\" && echo' ",
    "size-check": "npm run \"size-check:admin {@}\" \"size-check:client {@}\" -- ",
    "size-check:admin": "cd admin && echo --- admin --- && npm run analyze -- ",
    "size-check:client": "cd client && echo --- client --- && npm run analyze -- ",
    "project-show": "cat PROJECT.md | sed -n -e '/^## Contacts.*$/,/^#.*$/{ /^## Contacts.*$/d; /^#.*$/d; p; }'",
    "precommit:branch": "if git-branch-is -q test || git-branch-is -q uat || git-branch-is -q qa || git-branch-is -q stag || git-branch-is -q canary || git-branch-is -q cana || git-branch-is -q prod || git-branch-is -q master; then echo 'ERROR: You cannot commit changes directly to this environment branch. Only fast-forward merge is allowed.' && echo && exit 1; fi",
    "precommit:lint": "echo 'SKIP: Skipping linting on commit since we are already continuously linting during development.'",
    "husky:commit-msg": "commitlint --edit",
    "husky:pre-commit": "if [ \"$taito_mode\" != 'ci' ]; then npm-run-all precommit:branch precommit:lint; fi",
    "husky:pre-push": "if [ \"$taito_mode\" != 'ci' ]; then npm-run-all --parallel generate taito-host-lint taito-host-unit; fi",
    "release-pre:prod": "semantic-release --dry-run",
    "release-post:prod": "semantic-release --no-ci"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ],
    "rules": {
      "type-enum": [
        2,
        "always",
        [
          "wip",
          "feat",
          "fix",
          "docs",
          "style",
          "refactor",
          "perf",
          "test",
          "revert",
          "build",
          "ci",
          "chore"
        ]
      ]
    }
  },
  "release": {
    "npmPublish": false,
    "analyzeCommits": {
      "preset": "angular",
      "releaseRules": [
        {
          "type": "feat",
          "release": "minor"
        },
        {
          "type": "fix",
          "release": "patch"
        },
        {
          "type": "docs",
          "release": "patch"
        },
        {
          "type": "style",
          "release": "patch"
        },
        {
          "type": "refactor",
          "release": "patch"
        },
        {
          "type": "perf",
          "release": "patch"
        },
        {
          "type": "test",
          "release": "patch"
        },
        {
          "type": "revert",
          "release": "patch"
        },
        {
          "type": "build",
          "release": "patch"
        },
        {
          "type": "ci",
          "release": "patch"
        },
        {
          "type": "chore",
          "release": "patch"
        }
      ]
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TaitoUnited/full-stack-template.git"
  },
  "devDependencies": {
    "@commitlint/cli": "~16.1.0",
    "@commitlint/config-conventional": "~16.0.0",
    "git-branch-is": "~4.0.0",
    "husky": "~7.0.4",
    "npm-run-all": "~4.1.5",
    "semantic-release": "~19.0.2"
  }
}
