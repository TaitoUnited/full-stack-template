{
  "name": "server-template",
  "description": "",
  "private": true,
  "scripts": {
    "install-all": "npm-run-all install-all:admin install-all:bot install-all:client install-all:function install-all:server install-all:worker",
    "install-all:admin": "cd admin && npm install",
    "install-all:bot": "cd bot && npm install",
    "install-all:client": "cd client && npm install",
    "install-all:function": "cd function && npm install",
    "install-all:server": "cd server && npm install",
    "install-all:worker": "cd worker && npm install",
    "lint": "npm-run-all --parallel lint:admin lint:bot lint:client lint:function lint:server lint:worker",
    "lint:admin": "eslint ./admin --ignore-path ./admin/.eslintignore --quiet",
    "lint:bot": "eslint ./bot --ignore-path ./bot/.eslintignore --quiet",
    "lint:client": "eslint ./client --ignore-path ./client/.eslintignore --quiet",
    "lint:function": "eslint ./function --ignore-path ./function/.eslintignore --quiet",
    "lint:server": "eslint ./server --ignore-path ./server/.eslintignore --quiet",
    "lint:worker": "echo TODO lint:worker",
    "analyze": "npm-run-all --parallel analyze:admin analyze:client",
    "analyze:admin": "( cd admin && npm run analyze )",
    "analyze:client": "( cd client && npm run analyze )",
    "unit": "npm-run-all --parallel unit:admin unit:bot unit:client unit:function unit:server unit:worker",
    "unit:admin": "taito run: admin -- npm run unit",
    "unit:bot": "echo TODO unit:bot",
    "unit:client": "taito run: client -- npm run unit",
    "unit:function": "echo TODO unit:function",
    "unit:server": "taito run: server -- npm run unit",
    "unit:worker": "echo TODO unit:worker",
    "test": "npm-run-all --parallel test:admin test:bot test:client test:function test:server test:worker",
    "test:admin": "taito util-test:${taito_env} admin ${taito_app_url} ${test_api_user}",
    "test:bot": "echo TODO test:bot",
    "test:client": "taito util-test:${taito_env} client ${taito_app_url} ${test_api_user}",
    "test:function": "echo TODO test:function",
    "test:server": "taito util-test:${taito_env} server ${taito_app_url} ${test_api_user}",
    "test:worker": "echo TODO test:worker",
    "info:local": "taito secrets | grep 'Showing\\|PASSWORD'; echo; echo 'TODO: add local users to package.json (username/password)'",
    "info:dev": "taito secrets:dev | grep -A 1 'Showing\\|user.'; echo; echo 'TODO: add dev users to package.json (username/password)'",
    "info:test": "taito secrets:test | grep -A 1 'Showing\\|user.'; echo; echo 'TODO: add test users to package.json (username/password)'",
    "info:staging": "TODO",
    "info:prod": "TODO",
    "taito-init:local:clean": "taito -z init --clean && npm run clean:storage",
    "clean:storage": "rm -rf ./storage/bucket/*; rm -rf ./storage/.minio.sys/buckets/bucket/*/",
    "scan": "npm run lint && npm run flow && echo 'TODO: code analysis'",
    "flow": "echo DISABLED flow",
    "docs": "echo TODO: generate docs in package.json",
    "contacts-development": "cat PROJECT.md | sed -n -e '/^## Development.*$/,/^#.*$/{ /^## Development.*$/d; /^#.*$/d; p; }'",
    "contacts-maintenance": "cat PROJECT.md | sed -n -e '/^## Maintenance.*$/,/^#.*$/{ /^## Maintenance.*$/d; /^#.*$/d; p; }'",
    "precommit": "echo 'NOTE: Running precommit inside taito container' && echo taito taito-precommit",
    "prepush": "echo 'NOTE: Running prepush inside taito container' && echo taito taito-prepush",
    "taito-precommit": "echo 'SKIP: Skip linting on commit since we are already continuously linting during development.'",
    "taito-prepush": "npm-run-all --parallel lint flow unit",
    "commit": "echo 'Running commitizen locally' && git-cz",
    "commitmsg": "echo 'NOTE: Running validate-commit-msg locally' && validate-commit-msg",
    "ci-release-pre:prod": "semantic-release pre",
    "ci-release-post:prod": "semantic-release post"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    },
    "validate-commit-msg": {
      "types": [
        "wip",
        "feat",
        "fix",
        "docs",
        "style",
        "refactor",
        "perf",
        "test",
        "build",
        "ci",
        "chore",
        "revert"
      ],
      "scope": {
        "required": false,
        "allowed": [
          "*"
        ],
        "validate": false,
        "multiple": false
      },
      "warnOnFail": false,
      "maxSubjectLength": 100,
      "subjectPattern": ".+",
      "subjectPatternErrorMsg": "subject does not match subject pattern!",
      "helpMessage": "",
      "autoFix": false
    }
  },
  "release": {
    "getLastRelease": "last-release-git",
    "debug": false,
    "verifyConditions": {
      "path": "./node_modules/semantic-release/src/lib/plugin-noop.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com:TaitoUnited/server-template.git"
  },
  "bugs": {
    "url": "https://github.com/TaitoUnited/server-template/issues"
  },
  "keywords": [
    "orig-template",
    "server-template",
    "companyname",
    "wepapp",
    "react",
    "node.js",
    "redis",
    "postgres",
    "s3"
  ],
  "author": "Taito United <support@taitounited.fi>",
  "license": "MIT",
  "homepage": "https://github.com/TaitoUnited/server-template#readme",
  "devDependencies": {
    "babel-eslint": "^6.1.0",
    "commitizen": "^2.9.6",
    "cz-conventional-changelog": "^2.0.0",
    "eslint": "3.19.0",
    "eslint-config-airbnb": "14.1.0",
    "eslint-config-airbnb-base": "11.1.2",
    "eslint-config-prettier": "^2.3.0",
    "eslint-loader": "^1.9.0",
    "eslint-plugin-babel": "^4.1.1",
    "eslint-plugin-import": "2.2.0",
    "eslint-plugin-jsx-a11y": "4.0.0",
    "eslint-plugin-prettier": "^2.1.2",
    "eslint-plugin-react": "^7.0.0",
    "flow-bin": "^0.66.0",
    "husky": "^0.14.3",
    "last-release-git": "0.0.3",
    "npm-run-all": "^4.0.2",
    "prettier": "^1.8.1",
    "pump": "^3.0.0",
    "semantic-release": "^8.1.2",
    "validate-commit-msg": "^2.14.0"
  }
}
