version: '3.5'
services:
  server-template-ingress:
    container_name: server-template-ingress
    image: nginx:1.15-alpine
    restart: unless-stopped
    networks:
      - default
    ports:
      - "9999:80"
    volumes:
      - "./docker-nginx.conf:/etc/nginx/nginx.conf:delegated"
      - "./docker-nginx.htpasswd:/etc/nginx/.htpasswd:delegated"

  # admin start
  server-template-admin:
    container_name: server-template-admin
    build:
      context: ./admin
      dockerfile: ${dockerfile}
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    volumes:
      - "./admin:/service:delegated"
      - "./shared:/service/shared:delegated"
      - "/service/node_modules"
      # NOTE: for flow
      # - "/service/flow-typed/npm"
  # admin end

  # client start
  server-template-client:
    container_name: server-template-client
    build:
      context: ./client
      dockerfile: ${dockerfile}
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    volumes:
      - "./client:/service:delegated"
      - "./shared:/service/shared:delegated"
      - "/service/node_modules"
      # NOTE: for flow
      # - "/service/flow-typed/npm"
    environment:
      # NOTE: Database connection is for tests only
      DATABASE_HOST: server-template-database
      DATABASE_NAME: server_template_local
      DATABASE_USER: server_template_local_app
      DATABASE_PASSWORD: secret

  # client end

  # graphql start
  server-template-graphql:
    container_name: server-template-graphql
    build:
      context: ./graphql
      dockerfile: ${dockerfile}
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    volumes:
      - "./graphql:/service:delegated"
      - "./shared:/service/shared:delegated"
      - "/service/node_modules"
      # NOTE: for flow
      # - "/service/flow-typed/npm"
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template
      COMMON_DOMAIN: localhost
      COMMON_URL: http://localhost:9999
      COMMON_DEBUG: 'false'
      COMMON_LOG_FORMAT: text
      COMMON_LOG_LEVEL: info      # trace, debug, info, warn, error, fatal
      COMMON_ENV: local
      DEBUG: 'false'
      GRAPHQL_PORT: 8080
      GRAPHQL_BINDADDR: 0.0.0.0
      API_HOST: server-template-server
      API_PORT: 8080
  # graphql end

  # server start
  server-template-server:
    container_name: server-template-server
    build:
      context: ./server
      dockerfile: ${dockerfile}
    restart: unless-stopped
    networks:
      - default
    ports:
      - "8080"
    volumes:
      - "./server:/service:delegated"
      - "./shared:/service/shared:delegated"
      - "/service/node_modules"
      # NOTE: for flow
      # - "/service/flow-typed/npm"
    environment:
      COMMON_COMPANY: companyname
      COMMON_PROJECT: server-template
      COMMON_DEBUG: 'false'
      COMMON_LOG_FORMAT: text
      COMMON_LOG_LEVEL: info      # trace, debug, info, warn, error, fatal
      COMMON_ENV: local
      DEBUG: 'false'
      SENTRY_DSN: #sentryDSN
      API_PORT: 8080
      API_BINDADDR: 0.0.0.0
      DATABASE_HOST: server-template-database
      DATABASE_NAME: server_template_local
      DATABASE_USER: server_template_local_app
      DATABASE_PASSWORD: secret
      DATABASE_POOL_MIN: '1'
      DATABASE_POOL_MAX: '10'
      S3_URL: http://server-template-storage:9000/
      S3_REGION: milkyway
      S3_BUCKET: bucket
      S3_KEY_ID: 070UEOQR6LX4YPZLFU0V
      S3_KEY_SECRET: CVQVa33NekSiOJGnevSY5ITr8Rql8lFkp22WhLQ+
      # USER_PASSWORD: password-example # SHOW ON INFO
  # server end

  # worker start
  # server-template-worker:
  #   container_name: server-template-worker
  #   build:
  #     context: ./worker
  #     dockerfile: ${dockerfile}
  #   restart: unless-stopped
  #   networks:
  #     - default
  #   ports:
  #     - "8080"
  #   volumes:
  #     - "./worker:/service:delegated"
  #     - "./shared:/service/shared:delegated"
  #     - "/service/node_modules"
  #     # NOTE: for flow
  #     # - "/service/flow-typed/npm"
  #   environment:
  #     COMMON_DEBUG: 'true'
  #     COMMON_PROJECT: server-template
  #     COMMON_COMPANY: companyname
  #     COMMON_ENV: local
  #     DEBUG: 'false'
  #     API_BINDADDR: 0.0.0.0
  #     API_PORT: 8080
  #     DATABASE_HOST: server-template-database
  #     DATABASE_NAME: server_template_local
  #     DATABASE_USER: server_template_local_app
  #     DATABASE_PASSWORD: secret
  #     DATABASE_POOL_MAX: '10'
  #     S3_URL: http://server-template-storage:9000/
  #     S3_REGION: milkyway
  #     S3_BUCKET: bucket
  #     S3_KEY_ID: 070UEOQR6LX4YPZLFU0V
  #     S3_KEY_SECRET: CVQVa33NekSiOJGnevSY5ITr8Rql8lFkp22WhLQ+
  # worker end

  # www start
  # server-template-www:
  #   container_name: server-template-www
  #   build:
  #     context: ./www
  #     dockerfile: ${dockerfile}
  #   restart: unless-stopped
  #   networks:
  #     - default
  #   ports:
  #     - "8080"
  #   volumes:
  #     - "./www:/service:delegated"
  #     - "./shared:/service/shared:delegated"
  #     - "/service/node_modules"
  #     # NOTE: for flow
  #     # - "/service/flow-typed/npm"
  # www end

  # cache start
  # server-template-cache:
  #   container_name: server-template-cache
  #   image: redis:alpine
  #   restart: unless-stopped
  #   networks:
  #     - default
  #   ports:
  #     - "6379"
  # cache end

  # queue start
  # server-template-queue:
  #   container_name: server-template-queue
  #   image: rabbitmq:alpine
  #   restart: unless-stopped
  #   networks:
  #     - default
  #   ports:
  #     - "5672"
  # queue end

  # "EXTERNAL RESOURCES"

  # database start
  server-template-database:
    container_name: server-template-database
    image: postgres:9.6
    restart: unless-stopped
    networks:
      - default
    ports:
      - "6000:5432"
    environment:
      POSTGRES_DB: server_template_local
      POSTGRES_USER: server_template_local_app
      POSTGRES_PASSWORD: secret
    volumes:
      - "./database:/docker-entrypoint-initdb.d:delegated"
  # database end

  # storage start
  server-template-storage:
    container_name: server-template-storage
    build:
      context: ./storage
      dockerfile: ${dockerfile}
    restart: unless-stopped
    command: server /service
    networks:
      - default
    ports:
      - "9000"
    environment:
      MINIO_ACCESS_KEY: 070UEOQR6LX4YPZLFU0V
      MINIO_SECRET_KEY: CVQVa33NekSiOJGnevSY5ITr8Rql8lFkp22WhLQ+
  # storage end

networks:
  default:

# EOF
