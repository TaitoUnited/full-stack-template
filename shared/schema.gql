# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreatePostInput {
  author: String
  content: String
  moderatorId: String
  subject: String
}

input CreateUserInput {
  email: String!
  externalIds: [String!] = []
  firstName: String!
  language: String
  lastName: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeletePostInput {
  id: String!
}

input DeleteUserInput {
  id: String!
}

type EntityId {
  id: String!
}

input Filter {
  field: String!
  type: FilterType!
  value: String!

  """Determines how the value is treated"""
  valueType: ValueType = TEXT
}

input FilterGroup {
  filters: [Filter!]!
  operator: FilterOperator!
}

enum FilterOperator {
  AND
  OR
}

enum FilterType {
  EQ
  GT
  GTE
  ILIKE
  LIKE
  LT
  LTE
  NEQ
}

type Mutation {
  """Creates a new post."""
  createPost(input: CreatePostInput!): Post!

  """Creates a new user."""
  createUser(input: CreateUserInput!): User!

  """Deletes a user."""
  deleteUser(input: DeleteUserInput!): EntityId!

  """Updates a post."""
  updatePost(input: UpdatePostInput!): Post!

  """Updates a user."""
  updateUser(input: UpdateUserInput!): User!
}

input Order {
  dir: OrderDirection!
  field: String!
}

enum OrderDirection {
  ASC
  DESC
}

type PaginatedPosts {
  data: [Post!]!
  total: Float!
}

type PaginatedUsers {
  data: [User!]!
  total: Float!
}

input Pagination {
  limit: Float!
  offset: Float!
}

type Post {
  author: String
  content: String
  createdAt: DateTime!
  id: String!
  moderator: User
  moderatorId: String
  subject: String
  updatedAt: DateTime!
}

input PostFilter {
  author: String!
  createdAt: DateTime!
  subject: String!
  updatedAt: DateTime!
}

type Query {
  """Reads a post."""
  post(id: String!): Post

  """Searches posts."""
  posts(filterGroups: [FilterGroup!] = [], order: Order = {dir: DESC, field: "createdAt"}, pagination: Pagination = {limit: 50, offset: 0}, search: String = null): PaginatedPosts!

  """Reads a user."""
  user(id: String!): User

  """Search users."""
  users(filterGroups: [FilterGroup!] = [], order: Order = {dir: ASC, field: "lastName"}, pagination: Pagination = null, search: String = null): PaginatedUsers!
}

input UpdatePostInput {
  author: String
  content: String
  id: String!
  moderatorId: String
  subject: String
}

input UpdateUserInput {
  email: String
  externalIds: [String!]
  firstName: String
  id: String!
  language: String
  lastName: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  language: String
  lastName: String!
  updatedAt: DateTime!
}

input UserFilter {
  email: String!
  firstName: String!
  lastName: String!
}

enum ValueType {
  DATE
  NUMBER
  TEXT
}
