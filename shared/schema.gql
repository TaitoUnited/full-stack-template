# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attachment {
  contentType: String!
  createdAt: DateTime!
  description: String
  fileUrl: String
  filename: String
  id: ID!
  title: String
  updatedAt: DateTime!
}

input AttachmentFilter {
  attachmentType: String!
  contentType: String!
  createdAt: DateTime!
  description: String!
  filename: String!
  id: String!
  postId: String!
  title: String!
  updatedAt: DateTime!
}

type AttachmentUploadRequestDetails {
  headers: [KeyValue!]!
  id: String!
  url: String!
}

input CreateAttachmentInput {
  contentType: String!
  description: String
  filename: String
  title: String
}

input CreateAttachmentInputBase {
  contentType: String!
  filename: String
}

input CreatePostAttachmentInput {
  contentType: String!
  description: String
  filename: String
  postId: String!
  title: String
}

input CreatePostInput {
  author: String!
  content: String!
  subject: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteAttachmentInput {
  id: String!
}

input DeletePostAttachmentInput {
  id: String!
  postId: String!
}

input DeletePostInput {
  id: String!
}

input Filter {
  field: String!
  operator: FilterOperator!
  value: String

  """Determines how the value is treated"""
  valueType: ValueType = TEXT
}

input FilterGroup {
  filters: [Filter!]!
  operator: FilterLogicalOperator!
}

enum FilterLogicalOperator {
  AND
  OR
}

enum FilterOperator {
  EQ
  GT
  GTE
  ILIKE
  LIKE
  LT
  LTE
  NEQ
}

input FinalizePostAttachmentInput {
  id: String!
  postId: String!
}

type KeyValue {
  key: String!
  value: String!
}

type Mutation {
  """Creates a new post."""
  createPost(input: CreatePostInput!): Post!

  """
  
        Creates a new attachment for post.
        Returns URL and HTTP headers that should be used to upload the file using HTTP PUT.
      
  """
  createPostAttachment(input: CreatePostAttachmentInput!): AttachmentUploadRequestDetails!

  """Deletes a post."""
  deletePost(input: DeletePostInput!): Post!

  """Deletes post attachment. Returns attachment that was deleted."""
  deletePostAttachment(input: DeletePostAttachmentInput!): Attachment!

  """
  Finalizes uploaded post attachment. Call this after successful HTTP PUT upload.
  """
  finalizePostAttachment(input: FinalizePostAttachmentInput!): Attachment!

  """Updates a post."""
  updatePost(input: UpdatePostInput!): Post!

  """Updates post attachment."""
  updatePostAttachment(input: UpdatePostAttachmentInput!): Attachment!
}

input Order {
  """Determines whether to sort ascending or descending."""
  dir: OrderDirection = ASC
  field: String!

  """Determines whether NULL values are ordered first or last."""
  invertNullOrder: Boolean = false
}

enum OrderDirection {
  ASC
  DESC
}

type PaginatedAttachments {
  data: [Attachment!]!
  total: Float!
}

type PaginatedPosts {
  data: [Post!]!
  total: Float!
}

input Pagination {
  limit: Float!
  offset: Float!
}

type Post {
  attachments(attachmentOrder: Order = {dir: ASC, field: "createdAt", invertNullOrder: false}): PaginatedAttachments!
  author: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  subject: String!
  updatedAt: DateTime!
}

input PostFilter {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

type Query {
  """Returns all MIME types allowed for post attachments."""
  allowedPostAttachmentMimeTypes: [String!]!

  """Reads a post."""
  post(id: String!): Post!

  """Reads a post attachment."""
  postAttachment(input: ReadPostAttachmentInput!): Attachment!

  """Searches posts."""
  posts(filterGroups: [FilterGroup!] = [], order: Order = {dir: DESC, field: "createdAt", invertNullOrder: false}, pagination: Pagination = {limit: 20, offset: 0}, search: String = null): PaginatedPosts!
}

input ReadPostAttachmentInput {
  id: String!
  postId: String!
}

type RequestDetails {
  headers: [KeyValue!]!
  url: String!
}

input UpdateAttachmentInput {
  description: String
  id: String!
  title: String
}

input UpdateAttachmentInputBase {
  id: String!
}

input UpdatePostAttachmentInput {
  description: String
  id: String!
  postId: String!
  title: String
}

input UpdatePostInput {
  author: String
  content: String
  id: String!
  subject: String
}

enum ValueType {
  DATE
  NUMBER
  TEXT
}
